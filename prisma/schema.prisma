// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
  
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String
  password String
  token String

  avatar String? @db.VarChar(500)
  phone String
  city String
  location String
  zip String

  stripeCustomerId String
  purchase Purchase[]

  subscriptionId Int?
  subscription Subscription? @relation(fields:[subscriptionId], references: [id])

  isAdmin Boolean @default(false)

  resetPasswordToken   String? @unique
  resetPasswordExpires DateTime?
  
}


model Subscription {
  id                 Int                  @id @default(autoincrement())
  name               String
  price              Float
  image              String               @default("https://www.placeholder.com/200/300")
  description        String
  listItems          String
  stripeProductId    String?
  stripePriceId      String?
  interval           SubscriptionInterval @default(month)
  intervalCount      Int                  @default(1)
  // relatedCollections Collection[] // Si vous avez un modèle Collection
  relatedGames Game[] // Si vous avez un modèle Game/produit

  users              User[] // Pour établir la relation avec les utilisateurs
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}


enum SubscriptionInterval {
  day
  week
  month
  year
}

model Event {
  id        Int     @id @default(autoincrement())
  title     String
  content   String @db.VarChar(1000)
  image String? @db.VarChar(500)
  published Boolean @default(true)
  author  String
  tendances Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}


model Purchase{
  id        Int     @id @default(autoincrement())
  price Float
  tokenSaas String
  userId Int
  user User  @relation(fields:[userId], references: [id])

  stripeUserId String
  status PurchaseStatus
  invoiceUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum PurchaseStatus {
  paid
  pending
  shipped
  delivered
  returned
  cancelled
  active
}

model Game {
  id                 Int            @id @default(autoincrement())
  name               String
  image_url          String         @default("https://www.placeholder.com/200/300")
  image_url2         String         @default("https://www.placeholder.com/200/300")
  image_url3         String         @default("https://www.placeholder.com/200/300")
  description        String
  // sizeGame        sizeGame[]
  subscriptions Subscription[]

  author String? @default("Unknown")
  size String? @default("Unknown")
  compatibility String? @default("Windows / Linux / OS / IOS / Android")

  relatedCollections Collection[]

  stripeProductId    String?        // stripe product id
  stripePriceId      String?        // stripe price id
  // relatedEvents      EventGame[]
  price              Float?
  stock              Int            @default(99999)
  status             GameStatus  @default(available)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}


model Collection {
  id            Int            @id @default(autoincrement())
  name          String
  image         String         @default("https://www.placeholder.com/200/300")
  description   String
  status        Boolean        @default(true)

  games      Game[]
  // subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum GameStatus {
  pending
  available
  sold_out
}
// model sizeGame {
//   id        Int     @id @default(autoincrement())
//   sizeId    Int
//   size      Size    @relation(fields: [sizeId], references: [id])
//   gameId Int
//   game   Game @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   // Ajoutez la relation inverse pour le modèle Size
//   // Size      Size[]    @relation("SizeGameSize")
// }

// model Size {
//   id           Int           @id @default(autoincrement())
//   size         Int
//   sizeGames sizeGame[] // Ajoutez la relation inverse pour le modèle sizeGame
// }

